// import localFont from "next/font/local";
// import "./globals.css";
import { poppins, questrial } from "../fonts";
import { NextIntlClientProvider } from "next-intl";
import {
  getMessages,
  getTranslations,
  unstable_setRequestLocale,
} from "next-intl/server";
import { ReactNode } from "react";
import { routing } from "@/i18n/routing";
import Navigation from "../components/Navigation/Navigation";

// const geistSans = localFont({
//   src: "../fonts/GeistVF.woff",
//   variable: "--font-geist-sans",
//   weight: "100 900",
// });
// const geistMono = localFont({
//   src: "../fonts/GeistMonoVF.woff",
//   variable: "--font-geist-mono",
//   weight: "100 900",
// });
// // -------------------------------------
// className={`${geistSans.variable} ${geistMono.variable} antialiased`}

type Props = {
  children: ReactNode;
  params: { locale: string };
};

export function generateStaticParams() {
  return routing.locales.map((locale) => ({ locale }));
}

// export const metadata: Metadata = {
//   title: "ITCompany",
//   description: "Generated by create next app",
// };
export async function generateMetadata({
  params: { locale },
}: Omit<Props, "children">) {
  const t = await getTranslations({ locale, namespace: "LocaleLayout" });
  return {
    title: t("title"),
  };
}

export default async function LocaleLayout({
  children,
  params: { locale },
}: Props) {
  unstable_setRequestLocale(locale);

  // Providing all messages to the client
  // side is the easiest way to get started
  const messages = await getMessages();

  return (
    <html className="h-full" lang={locale}>
      <body className={`${poppins.variable} ${questrial.variable} antialiased`}>
        <NextIntlClientProvider messages={messages}>
          {children}
          <Navigation />
        </NextIntlClientProvider>
      </body>
    </html>
  );
}
